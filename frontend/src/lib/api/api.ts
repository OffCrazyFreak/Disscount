/* tslint:disable */
/* eslint-disable */
/**
 * Disscount API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'tokenType'?: string;
    /**
     * 
     * @type {UserDto}
     * @memberof AuthResponse
     */
    'user'?: UserDto;
}
/**
 * 
 * @export
 * @interface BulkPinnedPlaceRequest
 */
export interface BulkPinnedPlaceRequest {
    /**
     * 
     * @type {Array<PinnedPlaceRequest>}
     * @memberof BulkPinnedPlaceRequest
     */
    'places': Array<PinnedPlaceRequest>;
}
/**
 * 
 * @export
 * @interface BulkPinnedStoreRequest
 */
export interface BulkPinnedStoreRequest {
    /**
     * 
     * @type {Array<PinnedStoreRequest>}
     * @memberof BulkPinnedStoreRequest
     */
    'stores': Array<PinnedStoreRequest>;
}
/**
 * 
 * @export
 * @interface DigitalCardDto
 */
export interface DigitalCardDto {
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'codeType'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardDto
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface DigitalCardRequest
 */
export interface DigitalCardRequest {
    /**
     * 
     * @type {string}
     * @memberof DigitalCardRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardRequest
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardRequest
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardRequest
     */
    'codeType': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardRequest
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalCardRequest
     */
    'note'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'usernameOrEmail': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface NotificationDto
 */
export interface NotificationDto {
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationDto
     */
    'isRead'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'relatedProductApiId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'relatedStoreApiId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface NotificationRequest
 */
export interface NotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'relatedProductApiId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'relatedStoreApiId'?: string;
}
/**
 * 
 * @export
 * @interface PageNotificationDto
 */
export interface PageNotificationDto {
    /**
     * 
     * @type {number}
     * @memberof PageNotificationDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageNotificationDto
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageNotificationDto
     */
    'size'?: number;
    /**
     * 
     * @type {Array<NotificationDto>}
     * @memberof PageNotificationDto
     */
    'content'?: Array<NotificationDto>;
    /**
     * 
     * @type {number}
     * @memberof PageNotificationDto
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageNotificationDto
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof PageNotificationDto
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageNotificationDto
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageNotificationDto
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageNotificationDto
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageNotificationDto
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageableObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
}
/**
 * 
 * @export
 * @interface PinnedPlaceDto
 */
export interface PinnedPlaceDto {
    /**
     * 
     * @type {string}
     * @memberof PinnedPlaceDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PinnedPlaceDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PinnedPlaceDto
     */
    'placeApiId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PinnedPlaceDto
     */
    'placeName'?: string;
}
/**
 * 
 * @export
 * @interface PinnedPlaceRequest
 */
export interface PinnedPlaceRequest {
    /**
     * 
     * @type {string}
     * @memberof PinnedPlaceRequest
     */
    'placeApiId': string;
    /**
     * 
     * @type {string}
     * @memberof PinnedPlaceRequest
     */
    'placeName': string;
}
/**
 * 
 * @export
 * @interface PinnedStoreDto
 */
export interface PinnedStoreDto {
    /**
     * 
     * @type {string}
     * @memberof PinnedStoreDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PinnedStoreDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PinnedStoreDto
     */
    'storeApiId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PinnedStoreDto
     */
    'storeName'?: string;
}
/**
 * 
 * @export
 * @interface PinnedStoreRequest
 */
export interface PinnedStoreRequest {
    /**
     * 
     * @type {string}
     * @memberof PinnedStoreRequest
     */
    'storeApiId': string;
    /**
     * 
     * @type {string}
     * @memberof PinnedStoreRequest
     */
    'storeName': string;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof RegisterRequest
     */
    'stayLoggedInDays'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterRequest
     */
    'notificationsPush'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterRequest
     */
    'notificationsEmail'?: boolean;
}
/**
 * 
 * @export
 * @interface ShoppingListDto
 */
export interface ShoppingListDto {
    /**
     * 
     * @type {string}
     * @memberof ShoppingListDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListDto
     */
    'ownerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListDto
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShoppingListDto
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListDto
     */
    'aiPrompt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListDto
     */
    'aiAnswer'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<ShoppingListItemDto>}
     * @memberof ShoppingListDto
     */
    'items'?: Array<ShoppingListItemDto>;
}
/**
 * 
 * @export
 * @interface ShoppingListItemDto
 */
export interface ShoppingListItemDto {
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItemDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItemDto
     */
    'shoppingListId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItemDto
     */
    'productApiId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItemDto
     */
    'productName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShoppingListItemDto
     */
    'amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ShoppingListItemDto
     */
    'isChecked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItemDto
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface ShoppingListItemRequest
 */
export interface ShoppingListItemRequest {
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItemRequest
     */
    'productApiId': string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListItemRequest
     */
    'productName': string;
    /**
     * 
     * @type {number}
     * @memberof ShoppingListItemRequest
     */
    'amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ShoppingListItemRequest
     */
    'isChecked'?: boolean;
}
/**
 * 
 * @export
 * @interface ShoppingListRequest
 */
export interface ShoppingListRequest {
    /**
     * 
     * @type {string}
     * @memberof ShoppingListRequest
     */
    'title': string;
    /**
     * 
     * @type {boolean}
     * @memberof ShoppingListRequest
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListRequest
     */
    'aiPrompt'?: string;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastLoginAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'stayLoggedInDays'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'notificationsPush'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'notificationsEmail'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'subscriptionTier'?: UserDtoSubscriptionTierEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'subscriptionStartDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'numberOfAiPrompts'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastAiPromptAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'createdAt'?: string;
}

export const UserDtoSubscriptionTierEnum = {
    Free: 'FREE',
    Pro: 'PRO'
} as const;

export type UserDtoSubscriptionTierEnum = typeof UserDtoSubscriptionTierEnum[keyof typeof UserDtoSubscriptionTierEnum];

/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'username'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserRequest
     */
    'stayLoggedInDays'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequest
     */
    'notificationsPush'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequest
     */
    'notificationsEmail'?: boolean;
}
/**
 * 
 * @export
 * @interface WatchlistItemDto
 */
export interface WatchlistItemDto {
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemDto
     */
    'productApiId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemDto
     */
    'productName'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemDto
     */
    'lastNotifiedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemDto
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface WatchlistItemRequest
 */
export interface WatchlistItemRequest {
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemRequest
     */
    'productApiId': string;
    /**
     * 
     * @type {string}
     * @memberof WatchlistItemRequest
     */
    'productName': string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login with email/username and password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout from current session
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (refreshTokenRequest: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('logout', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout from all sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh access token using refresh token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshTokenRequest: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refreshToken', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('register', 'registerRequest', registerRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login with email/username and password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout from current session
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(refreshTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout from all sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.logoutAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh access token using refresh token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Login with email/username and password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout from current session
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.logout(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout from all sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAll(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.logoutAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh access token using refresh token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.refreshToken(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.register(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Login with email/username and password
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout from current session
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logout(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logout(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout from all sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logoutAll(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logoutAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh access token using refresh token
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refreshToken(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public register(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).register(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DigitalCardsApi - axios parameter creator
 * @export
 */
export const DigitalCardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new digital card
         * @param {DigitalCardRequest} digitalCardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCard: async (digitalCardRequest: DigitalCardRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'digitalCardRequest' is not null or undefined
            assertParamExists('createCard', 'digitalCardRequest', digitalCardRequest)
            const localVarPath = `/api/digital-cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalCardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete digital card (soft delete)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCard: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCard', 'id', id)
            const localVarPath = `/api/digital-cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get digital card by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCardById', 'id', id)
            const localVarPath = `/api/digital-cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all digital cards for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/digital-cards/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update digital card
         * @param {string} id 
         * @param {DigitalCardRequest} digitalCardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCard: async (id: string, digitalCardRequest: DigitalCardRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCard', 'id', id)
            // verify required parameter 'digitalCardRequest' is not null or undefined
            assertParamExists('updateCard', 'digitalCardRequest', digitalCardRequest)
            const localVarPath = `/api/digital-cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalCardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DigitalCardsApi - functional programming interface
 * @export
 */
export const DigitalCardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DigitalCardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new digital card
         * @param {DigitalCardRequest} digitalCardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCard(digitalCardRequest: DigitalCardRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigitalCardDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCard(digitalCardRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DigitalCardsApi.createCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete digital card (soft delete)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCard(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DigitalCardsApi.deleteCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get digital card by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigitalCardDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DigitalCardsApi.getCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all digital cards for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DigitalCardDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DigitalCardsApi.getUserCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update digital card
         * @param {string} id 
         * @param {DigitalCardRequest} digitalCardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCard(id: string, digitalCardRequest: DigitalCardRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigitalCardDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCard(id, digitalCardRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DigitalCardsApi.updateCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DigitalCardsApi - factory interface
 * @export
 */
export const DigitalCardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DigitalCardsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new digital card
         * @param {DigitalCardRequest} digitalCardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCard(digitalCardRequest: DigitalCardRequest, options?: RawAxiosRequestConfig): AxiosPromise<DigitalCardDto> {
            return localVarFp.createCard(digitalCardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete digital card (soft delete)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCard(id: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.deleteCard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get digital card by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DigitalCardDto> {
            return localVarFp.getCardById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all digital cards for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCards(options?: RawAxiosRequestConfig): AxiosPromise<Array<DigitalCardDto>> {
            return localVarFp.getUserCards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update digital card
         * @param {string} id 
         * @param {DigitalCardRequest} digitalCardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCard(id: string, digitalCardRequest: DigitalCardRequest, options?: RawAxiosRequestConfig): AxiosPromise<DigitalCardDto> {
            return localVarFp.updateCard(id, digitalCardRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DigitalCardsApi - object-oriented interface
 * @export
 * @class DigitalCardsApi
 * @extends {BaseAPI}
 */
export class DigitalCardsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new digital card
     * @param {DigitalCardRequest} digitalCardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalCardsApi
     */
    public createCard(digitalCardRequest: DigitalCardRequest, options?: RawAxiosRequestConfig) {
        return DigitalCardsApiFp(this.configuration).createCard(digitalCardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete digital card (soft delete)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalCardsApi
     */
    public deleteCard(id: string, options?: RawAxiosRequestConfig) {
        return DigitalCardsApiFp(this.configuration).deleteCard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get digital card by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalCardsApi
     */
    public getCardById(id: string, options?: RawAxiosRequestConfig) {
        return DigitalCardsApiFp(this.configuration).getCardById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all digital cards for current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalCardsApi
     */
    public getUserCards(options?: RawAxiosRequestConfig) {
        return DigitalCardsApiFp(this.configuration).getUserCards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update digital card
     * @param {string} id 
     * @param {DigitalCardRequest} digitalCardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalCardsApi
     */
    public updateCard(id: string, digitalCardRequest: DigitalCardRequest, options?: RawAxiosRequestConfig) {
        return DigitalCardsApiFp(this.configuration).updateCard(id, digitalCardRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new notification
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification: async (notificationRequest: NotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('createNotification', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete notification
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNotification', 'id', id)
            const localVarPath = `/api/notifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user\'s notifications with pagination
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserNotifications: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getCurrentUserNotifications', 'pageable', pageable)
            const localVarPath = `/api/notifications/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark all user\'s notifications as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllAsRead: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notifications/me/read-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark notification as read
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('markAsRead', 'id', id)
            const localVarPath = `/api/notifications/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new notification
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotification(notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotification(notificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.createNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete notification
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotification(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotification(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.deleteNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current user\'s notifications with pagination
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserNotifications(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageNotificationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserNotifications(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.getCurrentUserNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark all user\'s notifications as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAllAsRead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAllAsRead(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.markAllAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark notification as read
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsRead(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsRead(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.markAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new notification
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification(notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationDto> {
            return localVarFp.createNotification(notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete notification
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteNotification(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current user\'s notifications with pagination
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserNotifications(pageable: Pageable, options?: RawAxiosRequestConfig): AxiosPromise<PageNotificationDto> {
            return localVarFp.getCurrentUserNotifications(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark all user\'s notifications as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllAsRead(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAllAsRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark notification as read
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAsRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new notification
     * @param {NotificationRequest} notificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public createNotification(notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).createNotification(notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete notification
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public deleteNotification(id: string, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).deleteNotification(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current user\'s notifications with pagination
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getCurrentUserNotifications(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getCurrentUserNotifications(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark all user\'s notifications as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public markAllAsRead(options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).markAllAsRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark notification as read
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public markAsRead(id: string, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).markAsRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PinnedPlacesApi - axios parameter creator
 * @export
 */
export const PinnedPlacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current user\'s pinned places
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserPinnedPlaces: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pinned-places/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user\'s pinned places (bulk operation)
         * @param {BulkPinnedPlaceRequest} bulkPinnedPlaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePinnedPlaces: async (bulkPinnedPlaceRequest: BulkPinnedPlaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkPinnedPlaceRequest' is not null or undefined
            assertParamExists('updatePinnedPlaces', 'bulkPinnedPlaceRequest', bulkPinnedPlaceRequest)
            const localVarPath = `/api/pinned-places/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPinnedPlaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PinnedPlacesApi - functional programming interface
 * @export
 */
export const PinnedPlacesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PinnedPlacesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current user\'s pinned places
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserPinnedPlaces(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PinnedPlaceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserPinnedPlaces(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PinnedPlacesApi.getCurrentUserPinnedPlaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update user\'s pinned places (bulk operation)
         * @param {BulkPinnedPlaceRequest} bulkPinnedPlaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePinnedPlaces(bulkPinnedPlaceRequest: BulkPinnedPlaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PinnedPlaceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePinnedPlaces(bulkPinnedPlaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PinnedPlacesApi.updatePinnedPlaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PinnedPlacesApi - factory interface
 * @export
 */
export const PinnedPlacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PinnedPlacesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current user\'s pinned places
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserPinnedPlaces(options?: RawAxiosRequestConfig): AxiosPromise<Array<PinnedPlaceDto>> {
            return localVarFp.getCurrentUserPinnedPlaces(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user\'s pinned places (bulk operation)
         * @param {BulkPinnedPlaceRequest} bulkPinnedPlaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePinnedPlaces(bulkPinnedPlaceRequest: BulkPinnedPlaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PinnedPlaceDto>> {
            return localVarFp.updatePinnedPlaces(bulkPinnedPlaceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PinnedPlacesApi - object-oriented interface
 * @export
 * @class PinnedPlacesApi
 * @extends {BaseAPI}
 */
export class PinnedPlacesApi extends BaseAPI {
    /**
     * 
     * @summary Get current user\'s pinned places
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinnedPlacesApi
     */
    public getCurrentUserPinnedPlaces(options?: RawAxiosRequestConfig) {
        return PinnedPlacesApiFp(this.configuration).getCurrentUserPinnedPlaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user\'s pinned places (bulk operation)
     * @param {BulkPinnedPlaceRequest} bulkPinnedPlaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinnedPlacesApi
     */
    public updatePinnedPlaces(bulkPinnedPlaceRequest: BulkPinnedPlaceRequest, options?: RawAxiosRequestConfig) {
        return PinnedPlacesApiFp(this.configuration).updatePinnedPlaces(bulkPinnedPlaceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PinnedStoresApi - axios parameter creator
 * @export
 */
export const PinnedStoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current user\'s pinned stores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserPinnedStores: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pinned-stores/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user\'s pinned stores (bulk operation)
         * @param {BulkPinnedStoreRequest} bulkPinnedStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePinnedStores: async (bulkPinnedStoreRequest: BulkPinnedStoreRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkPinnedStoreRequest' is not null or undefined
            assertParamExists('updatePinnedStores', 'bulkPinnedStoreRequest', bulkPinnedStoreRequest)
            const localVarPath = `/api/pinned-stores/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPinnedStoreRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PinnedStoresApi - functional programming interface
 * @export
 */
export const PinnedStoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PinnedStoresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current user\'s pinned stores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserPinnedStores(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PinnedStoreDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserPinnedStores(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PinnedStoresApi.getCurrentUserPinnedStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update user\'s pinned stores (bulk operation)
         * @param {BulkPinnedStoreRequest} bulkPinnedStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePinnedStores(bulkPinnedStoreRequest: BulkPinnedStoreRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PinnedStoreDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePinnedStores(bulkPinnedStoreRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PinnedStoresApi.updatePinnedStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PinnedStoresApi - factory interface
 * @export
 */
export const PinnedStoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PinnedStoresApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current user\'s pinned stores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserPinnedStores(options?: RawAxiosRequestConfig): AxiosPromise<Array<PinnedStoreDto>> {
            return localVarFp.getCurrentUserPinnedStores(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user\'s pinned stores (bulk operation)
         * @param {BulkPinnedStoreRequest} bulkPinnedStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePinnedStores(bulkPinnedStoreRequest: BulkPinnedStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PinnedStoreDto>> {
            return localVarFp.updatePinnedStores(bulkPinnedStoreRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PinnedStoresApi - object-oriented interface
 * @export
 * @class PinnedStoresApi
 * @extends {BaseAPI}
 */
export class PinnedStoresApi extends BaseAPI {
    /**
     * 
     * @summary Get current user\'s pinned stores
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinnedStoresApi
     */
    public getCurrentUserPinnedStores(options?: RawAxiosRequestConfig) {
        return PinnedStoresApiFp(this.configuration).getCurrentUserPinnedStores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user\'s pinned stores (bulk operation)
     * @param {BulkPinnedStoreRequest} bulkPinnedStoreRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinnedStoresApi
     */
    public updatePinnedStores(bulkPinnedStoreRequest: BulkPinnedStoreRequest, options?: RawAxiosRequestConfig) {
        return PinnedStoresApiFp(this.configuration).updatePinnedStores(bulkPinnedStoreRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShoppingListItemsApi - axios parameter creator
 * @export
 */
export const ShoppingListItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add item to shopping list
         * @param {string} listId 
         * @param {ShoppingListItemRequest} shoppingListItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToShoppingList: async (listId: string, shoppingListItemRequest: ShoppingListItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('addItemToShoppingList', 'listId', listId)
            // verify required parameter 'shoppingListItemRequest' is not null or undefined
            assertParamExists('addItemToShoppingList', 'shoppingListItemRequest', shoppingListItemRequest)
            const localVarPath = `/api/shopping-lists/{listId}/items`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shoppingListItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete shopping list item
         * @param {string} listId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingListItem: async (listId: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('deleteShoppingListItem', 'listId', listId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteShoppingListItem', 'itemId', itemId)
            const localVarPath = `/api/shopping-lists/{listId}/items/{itemId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update shopping list item
         * @param {string} listId 
         * @param {string} itemId 
         * @param {ShoppingListItemRequest} shoppingListItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShoppingListItem: async (listId: string, itemId: string, shoppingListItemRequest: ShoppingListItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('updateShoppingListItem', 'listId', listId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateShoppingListItem', 'itemId', itemId)
            // verify required parameter 'shoppingListItemRequest' is not null or undefined
            assertParamExists('updateShoppingListItem', 'shoppingListItemRequest', shoppingListItemRequest)
            const localVarPath = `/api/shopping-lists/{listId}/items/{itemId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shoppingListItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingListItemsApi - functional programming interface
 * @export
 */
export const ShoppingListItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingListItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add item to shopping list
         * @param {string} listId 
         * @param {ShoppingListItemRequest} shoppingListItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItemToShoppingList(listId: string, shoppingListItemRequest: ShoppingListItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingListItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addItemToShoppingList(listId, shoppingListItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListItemsApi.addItemToShoppingList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete shopping list item
         * @param {string} listId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShoppingListItem(listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingListItem(listId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListItemsApi.deleteShoppingListItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update shopping list item
         * @param {string} listId 
         * @param {string} itemId 
         * @param {ShoppingListItemRequest} shoppingListItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShoppingListItem(listId: string, itemId: string, shoppingListItemRequest: ShoppingListItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingListItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShoppingListItem(listId, itemId, shoppingListItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListItemsApi.updateShoppingListItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShoppingListItemsApi - factory interface
 * @export
 */
export const ShoppingListItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingListItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add item to shopping list
         * @param {string} listId 
         * @param {ShoppingListItemRequest} shoppingListItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToShoppingList(listId: string, shoppingListItemRequest: ShoppingListItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingListItemDto> {
            return localVarFp.addItemToShoppingList(listId, shoppingListItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete shopping list item
         * @param {string} listId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingListItem(listId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShoppingListItem(listId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update shopping list item
         * @param {string} listId 
         * @param {string} itemId 
         * @param {ShoppingListItemRequest} shoppingListItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShoppingListItem(listId: string, itemId: string, shoppingListItemRequest: ShoppingListItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingListItemDto> {
            return localVarFp.updateShoppingListItem(listId, itemId, shoppingListItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShoppingListItemsApi - object-oriented interface
 * @export
 * @class ShoppingListItemsApi
 * @extends {BaseAPI}
 */
export class ShoppingListItemsApi extends BaseAPI {
    /**
     * 
     * @summary Add item to shopping list
     * @param {string} listId 
     * @param {ShoppingListItemRequest} shoppingListItemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListItemsApi
     */
    public addItemToShoppingList(listId: string, shoppingListItemRequest: ShoppingListItemRequest, options?: RawAxiosRequestConfig) {
        return ShoppingListItemsApiFp(this.configuration).addItemToShoppingList(listId, shoppingListItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete shopping list item
     * @param {string} listId 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListItemsApi
     */
    public deleteShoppingListItem(listId: string, itemId: string, options?: RawAxiosRequestConfig) {
        return ShoppingListItemsApiFp(this.configuration).deleteShoppingListItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update shopping list item
     * @param {string} listId 
     * @param {string} itemId 
     * @param {ShoppingListItemRequest} shoppingListItemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListItemsApi
     */
    public updateShoppingListItem(listId: string, itemId: string, shoppingListItemRequest: ShoppingListItemRequest, options?: RawAxiosRequestConfig) {
        return ShoppingListItemsApiFp(this.configuration).updateShoppingListItem(listId, itemId, shoppingListItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShoppingListsApi - axios parameter creator
 * @export
 */
export const ShoppingListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new shopping list
         * @param {ShoppingListRequest} shoppingListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShoppingList: async (shoppingListRequest: ShoppingListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shoppingListRequest' is not null or undefined
            assertParamExists('createShoppingList', 'shoppingListRequest', shoppingListRequest)
            const localVarPath = `/api/shopping-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shoppingListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete shopping list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingList: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteShoppingList', 'id', id)
            const localVarPath = `/api/shopping-lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all items from user\'s active shopping lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserShoppingListItems: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shopping-lists/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user\'s shopping lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserShoppingLists: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shopping-lists/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get shopping list by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getShoppingListById', 'id', id)
            const localVarPath = `/api/shopping-lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update shopping list
         * @param {string} id 
         * @param {ShoppingListRequest} shoppingListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShoppingList: async (id: string, shoppingListRequest: ShoppingListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateShoppingList', 'id', id)
            // verify required parameter 'shoppingListRequest' is not null or undefined
            assertParamExists('updateShoppingList', 'shoppingListRequest', shoppingListRequest)
            const localVarPath = `/api/shopping-lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shoppingListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingListsApi - functional programming interface
 * @export
 */
export const ShoppingListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingListsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new shopping list
         * @param {ShoppingListRequest} shoppingListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShoppingList(shoppingListRequest: ShoppingListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShoppingList(shoppingListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListsApi.createShoppingList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete shopping list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShoppingList(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingList(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListsApi.deleteShoppingList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all items from user\'s active shopping lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserShoppingListItems(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShoppingListItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserShoppingListItems(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListsApi.getAllUserShoppingListItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current user\'s shopping lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserShoppingLists(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShoppingListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserShoppingLists(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListsApi.getCurrentUserShoppingLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get shopping list by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingListById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingListById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListsApi.getShoppingListById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update shopping list
         * @param {string} id 
         * @param {ShoppingListRequest} shoppingListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShoppingList(id: string, shoppingListRequest: ShoppingListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShoppingList(id, shoppingListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingListsApi.updateShoppingList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShoppingListsApi - factory interface
 * @export
 */
export const ShoppingListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingListsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new shopping list
         * @param {ShoppingListRequest} shoppingListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShoppingList(shoppingListRequest: ShoppingListRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingListDto> {
            return localVarFp.createShoppingList(shoppingListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete shopping list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingList(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShoppingList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all items from user\'s active shopping lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserShoppingListItems(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShoppingListItemDto>> {
            return localVarFp.getAllUserShoppingListItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current user\'s shopping lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserShoppingLists(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShoppingListDto>> {
            return localVarFp.getCurrentUserShoppingLists(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get shopping list by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingListById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingListDto> {
            return localVarFp.getShoppingListById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update shopping list
         * @param {string} id 
         * @param {ShoppingListRequest} shoppingListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShoppingList(id: string, shoppingListRequest: ShoppingListRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingListDto> {
            return localVarFp.updateShoppingList(id, shoppingListRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShoppingListsApi - object-oriented interface
 * @export
 * @class ShoppingListsApi
 * @extends {BaseAPI}
 */
export class ShoppingListsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new shopping list
     * @param {ShoppingListRequest} shoppingListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListsApi
     */
    public createShoppingList(shoppingListRequest: ShoppingListRequest, options?: RawAxiosRequestConfig) {
        return ShoppingListsApiFp(this.configuration).createShoppingList(shoppingListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete shopping list
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListsApi
     */
    public deleteShoppingList(id: string, options?: RawAxiosRequestConfig) {
        return ShoppingListsApiFp(this.configuration).deleteShoppingList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all items from user\'s active shopping lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListsApi
     */
    public getAllUserShoppingListItems(options?: RawAxiosRequestConfig) {
        return ShoppingListsApiFp(this.configuration).getAllUserShoppingListItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current user\'s shopping lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListsApi
     */
    public getCurrentUserShoppingLists(options?: RawAxiosRequestConfig) {
        return ShoppingListsApiFp(this.configuration).getCurrentUserShoppingLists(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get shopping list by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListsApi
     */
    public getShoppingListById(id: string, options?: RawAxiosRequestConfig) {
        return ShoppingListsApiFp(this.configuration).getShoppingListById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update shopping list
     * @param {string} id 
     * @param {ShoppingListRequest} shoppingListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingListsApi
     */
    public updateShoppingList(id: string, shoppingListRequest: ShoppingListRequest, options?: RawAxiosRequestConfig) {
        return ShoppingListsApiFp(this.configuration).updateShoppingList(id, shoppingListRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if email exists
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmailExists: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('checkEmailExists', 'email', email)
            const localVarPath = `/api/users/exists/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if username exists
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsernameExists: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('checkUsernameExists', 'username', username)
            const localVarPath = `/api/users/exists/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch current user\'s profile (username, stayLoggedInDays, notifications)
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser: async (userRequest: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('updateCurrentUser', 'userRequest', userRequest)
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check if email exists
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEmailExists(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: boolean; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkEmailExists(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.checkEmailExists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check if username exists
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsernameExists(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: boolean; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsernameExists(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.checkUsernameExists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Soft delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.deleteCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch current user\'s profile (username, stayLoggedInDays, notifications)
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCurrentUser(userRequest: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCurrentUser(userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.updateCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Check if email exists
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmailExists(email: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: boolean; }> {
            return localVarFp.checkEmailExists(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if username exists
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsernameExists(username: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: boolean; }> {
            return localVarFp.checkUsernameExists(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.deleteCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDto>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch current user\'s profile (username, stayLoggedInDays, notifications)
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(userRequest: UserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.updateCurrentUser(userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export class UserManagementApi extends BaseAPI {
    /**
     * 
     * @summary Check if email exists
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public checkEmailExists(email: string, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).checkEmailExists(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if username exists
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public checkUsernameExists(username: string, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).checkUsernameExists(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public deleteCurrentUser(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).deleteCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public getAllUsers(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch current user\'s profile (username, stayLoggedInDays, notifications)
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public updateCurrentUser(userRequest: UserRequest, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).updateCurrentUser(userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WatchlistApi - axios parameter creator
 * @export
 */
export const WatchlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add product to watchlist
         * @param {WatchlistItemRequest} watchlistItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToWatchlist: async (watchlistItemRequest: WatchlistItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistItemRequest' is not null or undefined
            assertParamExists('addToWatchlist', 'watchlistItemRequest', watchlistItemRequest)
            const localVarPath = `/api/watchlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user\'s watchlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserWatchlist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/watchlist/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch product from watchlist by product API ID
         * @param {string} productApiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWatchlistItemByProductApiId: async (productApiId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productApiId' is not null or undefined
            assertParamExists('getWatchlistItemByProductApiId', 'productApiId', productApiId)
            const localVarPath = `/api/watchlist/product/{productApiId}`
                .replace(`{${"productApiId"}}`, encodeURIComponent(String(productApiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove product from watchlist
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromWatchlist: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeFromWatchlist', 'id', id)
            const localVarPath = `/api/watchlist/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WatchlistApi - functional programming interface
 * @export
 */
export const WatchlistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WatchlistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add product to watchlist
         * @param {WatchlistItemRequest} watchlistItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToWatchlist(watchlistItemRequest: WatchlistItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToWatchlist(watchlistItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.addToWatchlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current user\'s watchlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserWatchlist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WatchlistItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserWatchlist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.getCurrentUserWatchlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch product from watchlist by product API ID
         * @param {string} productApiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWatchlistItemByProductApiId(productApiId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWatchlistItemByProductApiId(productApiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.getWatchlistItemByProductApiId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove product from watchlist
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromWatchlist(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromWatchlist(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.removeFromWatchlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WatchlistApi - factory interface
 * @export
 */
export const WatchlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WatchlistApiFp(configuration)
    return {
        /**
         * 
         * @summary Add product to watchlist
         * @param {WatchlistItemRequest} watchlistItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToWatchlist(watchlistItemRequest: WatchlistItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<WatchlistItemDto> {
            return localVarFp.addToWatchlist(watchlistItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current user\'s watchlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserWatchlist(options?: RawAxiosRequestConfig): AxiosPromise<Array<WatchlistItemDto>> {
            return localVarFp.getCurrentUserWatchlist(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch product from watchlist by product API ID
         * @param {string} productApiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWatchlistItemByProductApiId(productApiId: string, options?: RawAxiosRequestConfig): AxiosPromise<WatchlistItemDto> {
            return localVarFp.getWatchlistItemByProductApiId(productApiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove product from watchlist
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromWatchlist(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromWatchlist(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WatchlistApi - object-oriented interface
 * @export
 * @class WatchlistApi
 * @extends {BaseAPI}
 */
export class WatchlistApi extends BaseAPI {
    /**
     * 
     * @summary Add product to watchlist
     * @param {WatchlistItemRequest} watchlistItemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public addToWatchlist(watchlistItemRequest: WatchlistItemRequest, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).addToWatchlist(watchlistItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current user\'s watchlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public getCurrentUserWatchlist(options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).getCurrentUserWatchlist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch product from watchlist by product API ID
     * @param {string} productApiId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public getWatchlistItemByProductApiId(productApiId: string, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).getWatchlistItemByProductApiId(productApiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove product from watchlist
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public removeFromWatchlist(id: string, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).removeFromWatchlist(id, options).then((request) => request(this.axios, this.basePath));
    }
}



